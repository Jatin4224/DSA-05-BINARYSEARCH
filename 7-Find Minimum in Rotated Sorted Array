// brute force 
/*int singleNonDuplicate(vector<int>& arr) {
    int n = arr.size();

    if (n == 1) {
        return arr[0];
    }

    for (int i = 0; i < n; i++) {
        if (i == 0 && arr[i] != arr[i + 1]) {
            return arr[i];
        } else if (i == n - 1 && arr[i] != arr[i - 1]) {
            return arr[i];
        } else if (arr[i] != arr[i - 1] && arr[i] != arr[i + 1]) {
            return arr[i];
        }
    }


    return -1; 
}*/
//optimal solution

    int singleNonDuplicate(vector<int>& arr) {
        int n = arr.size();

        if (n == 1) {
            return arr[0];
        }

        if (arr[0] != arr[1]) {
            return arr[0];
        }

        if (arr[n - 1] != arr[n - 2]) {
            return arr[n - 1];
        }

        // Binary search
        int low = 1, high = n - 2;
        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {
                return arr[mid];
            }

            // We are in the left subarray
            if ((mid % 2 == 1 && arr[mid] == arr[mid - 1]) || (mid % 2 == 0 && arr[mid] == arr[mid + 1])) {
                low = mid + 1;
            }
            // We are in the right subarray
            else {
                high = mid - 1;
            }
        }

        // If we reach this point, it means the single non-duplicate element was not found.
        return -1;
    
};
